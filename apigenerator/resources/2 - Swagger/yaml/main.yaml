openapi: 3.0.3
info:
  title: Core Platform Services
  version: "1.0.0"
  description: |-
    Provides core platform functionalities including SQL execution capabilities
    and an AI-powered interface (MCP) for querying the API's specification
    and managing LLM configurations.

tags:
  - name: SQL
    description: SQL context
  - name: MCP - Ask
    description: Query the API's specification using an LLM.
  - name: MCP - Configure
    description: Configure LLM providers and settings for the MCP Ask service.

components:
  schemas:
    McpAskRequest:
      type: object
      required:
        - question
      properties:
        question:
          type: string
          description: The natural language question about the API, or "healthcheck".
          example: "What endpoints are available for items?"

    McpAskResponse:
      type: object
      properties:
        answer:
          type: string
          description: The LLM-generated answer to the question about the API.
          example: "The API provides GET /items and POST /items for item management."

    McpHealthcheckResponse:
      type: object
      properties:
        answer:
          type: string
          enum: ["yes", "no"]
          description: "Indicates if the healthcheck passed ('yes') or failed ('no')."
        provider_checked:
          type: string
          description: The name of the LLM provider that was checked (e.g., "Gemini", "OpenAI").
          example: "Gemini"
        provider_attempted:
          type: string
          description: The LLM provider that was attempted if the check failed due to configuration.
          example: "unspecified_default"
          nullable: true
        reason:
          type: string
          description: Details if the healthcheck failed (e.g., "API connection test failed", "Configuration error: API_KEY not set").
          example: "API connection test failed"
          nullable: true

    McpErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: A summary of the error.
        details:
          type: string
          description: Optional additional details about the error.
          nullable: true

    McpEffectiveConfigResponse:
      type: object
      description: "Shows the current effective LLM configuration, merging runtime settings and environment defaults."
      properties:
        determined_default_provider:
          type: string
          description: The LLM provider currently acting as the default.
        config_source_default_provider:
          type: string
          description: Where the default provider setting was sourced from (runtime or environment).
        providers:
          type: object
          description: Configuration details for each supported LLM provider.
          properties:
            gemini:
              $ref: '#/components/schemas/McpProviderEffectiveSettings'
            openai:
              $ref: '#/components/schemas/McpProviderEffectiveSettings'
            anthropic:
              $ref: '#/components/schemas/McpProviderEffectiveSettings'
        # llm_config_file_path removed as it's now a fixed convention

    McpProviderEffectiveSettings:
      type: object
      properties:
        model:
          type: string
          description: The model name being used.
        model_source:
          type: string
          description: Where the model setting was sourced from.
        temperature:
          oneOf:
            - type: number
              format: float
            - type: string
          description: The temperature setting being used.
        temperature_source:
          type: string
          description: Where the temperature setting was sourced from.
        max_output_tokens:
          oneOf:
            - type: integer
            - type: string # To account for "Service Default" or "Invalid Format"
          description: The maximum number of tokens configured for generation.
        max_output_tokens_source:
          type: string
          description: Where the max_output_tokens setting was sourced from.

    McpConfigureRequest:
      type: object
      description: Payload for configuring LLM settings. Send one or more actions.
      properties:
        set_runtime_default_provider:
          type: string
          nullable: true
          description: "Set the runtime default LLM provider (e.g., 'gemini', 'openai', 'anthropic'). Set to null to clear runtime default and revert to ENV_DEFAULT_LLM_PROVIDER."
          example: "openai"
        update_provider_settings:
          type: object
          description: "Update specific settings for one or more providers."
          additionalProperties:
            $ref: '#/components/schemas/McpProviderConfigurableSettings'
          example:
            openai:
              model: "gpt-4o"
              temperature: 0.6
            gemini:
              temperature: 0.85
        clear_provider_settings:
          type: string
          description: "Clear all runtime settings for a specific provider name (e.g., 'openai'). Reverts to ENV defaults for that provider."
          example: "gemini"
        clear_all_runtime_settings:
          type: boolean
          description: "If true, clears all runtime configurations from llm_config.json, reverting all settings to ENV defaults."
          example: true

    McpProviderConfigurableSettings:
      type: object
      description: Settings that can be configured per provider.
      properties:
        model:
          type: string
          description: The model name to use for this provider.
          example: "gpt-4-turbo"
        temperature:
          type: number
          format: float
          description: The sampling temperature to use (e.g., 0.0 to 2.0, provider-dependent).
          example: 0.7
        max_output_tokens:
          type: integer
          description: The maximum number of tokens to generate in the response for this provider.
          example: 2048

    McpConfigureResponse:
      type: object
      properties:
        message:
          type: string
        actions_performed:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            type: string
          nullable: true

    # Schemas from sql.yaml (minimal, as they are mostly inline)
    SqlErrorResponse:
      description: ""
      type: object
      properties:
        ErrorMessage:
          type: string
          minLength: 1
      required:
        - ErrorMessage

    SqlGetSuccessResponse:
      type: array
      description: ""
      minItems: 1
      uniqueItems: true
      items:
        type: object
        properties: {} # Generic object, actual properties depend on query

    SqlPostSuccessResponse:
      description: ""
      type: object
      properties:
        Message:
          type: string
          minLength: 1
      required:
        - Message

    SqlStoredProcedureRequest:
      type: object
      description: "Body to send post sql stored procedure data"
      properties:
        out:
          type: object
          description: ""
        in:
          type: array
          minItems: 1
          items:
            type: string
      required:
        - in


  parameters:
    XProviderHeader:
      name: X-Provider
      in: header
      required: false
      description: |-
        Optional. Specifies an LLM provider (e.g., "gemini", "openai", "anthropic")
        to use for this specific request, overriding the configured default.
        The API key for this provider must be set in the environment.
      schema:
        type: string
        enum: ["gemini", "openai", "anthropic"]

    SqlQueryHeader:
      name: query
      in: header
      required: true
      schema:
        type: string

    SqlStoredProcedureHeader:
      name: storedprocedure
      in: header
      required: true
      schema:
        type: string

paths:
  /mcp/ask:
    post:
      tags:
        - MCP - Ask
      summary: Ask a question about the API or perform a healthcheck.
      description: |-
        Sends a natural language question to be answered by an LLM based on the API's
        OpenAPI specification.
        If the question is "healthcheck", it verifies the connectivity and configuration
        of the determined LLM provider.
      parameters:
        - $ref: '#/components/parameters/XProviderHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpAskRequest'
      responses:
        '200':
          description: Successful response for a question or healthcheck.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/McpAskResponse'
                  - $ref: '#/components/schemas/McpHealthcheckResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'
        '503':
          description: Service Unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'

  /mcp/ask/configure:
    get:
      tags:
        - MCP - Configure
      summary: View current LLM configuration.
      description: |-
        Displays the effective current LLM configuration, which is a merge of
        runtime settings from `llm_config.json` and initial defaults from
        environment variables. Does NOT display API keys.
      responses:
        '200':
          description: Effective LLM configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpEffectiveConfigResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'
    post:
      tags:
        - MCP - Configure
      summary: Set or update LLM runtime configurations.
      description: |-
        Allows setting the runtime default LLM provider and overriding model/temperature
        settings for specific providers. Changes are saved to `llm_config.json`.
        API Keys themselves are NOT configured here; they must be set as environment variables.
        This endpoint should be secured in a production environment.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/McpConfigureRequest'
      responses:
        '200':
          description: LLM configuration updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpConfigureResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/McpErrorResponse'

  /sql:
    get:
      tags:
        - SQL
      summary: Get SQL Query
      operationId: getSQLQuery
      parameters:
        - $ref: '#/components/parameters/SqlQueryHeader'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlGetSuccessResponse'
              examples:
                Query: # This example name might need to be more generic or removed if schema is generic
                  value:
                    - id_client: string
                      name: string
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Invalid SQL syntax: { value: { ErrorMessage: Invalid syntax for SQL query } }
                Malformed input data: { value: { ErrorMessage: Malformed input data } }
                Invalid SQL query: { value: { ErrorMessage: Invalid SQL query } }
                Possible SQL injection: { value: { ErrorMessage: SQL query blocked, possible injection attributes } }
                Invalid SQL method: { value: { ErrorMessage: SQL query blocked, invalid SQL verb for HTTP method } }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Table does not exist: { value: { ErrorMessage: Table does not exist } }
      description: Route responsible for retrieving a SQL Query
    post:
      tags:
        - SQL
      summary: Insert SQL Query
      operationId: insertSQLQuery
      parameters:
        - $ref: '#/components/parameters/SqlQueryHeader'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlPostSuccessResponse'
              examples:
                Query successfully persisted: { value: { Message: Query successfully persisted } }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Invalid SQL syntax: { value: { ErrorMessage: Invalid syntax for SQL query } }
                Invalid SQL query: { value: { ErrorMessage: Invalid SQL query } }
                Possible SQL injection: { value: { ErrorMessage: SQL query blocked, possible injection attributes } }
                Invalid SQL method: { value: { ErrorMessage: SQL query blocked, invalid SQL verb for HTTP method } }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Table does not exist: { value: { ErrorMessage: Table does not exist } }
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Malformed input data: { value: { ErrorMessage: Malformed input data } }
      description: Route responsible for inserting a SQL Query
    patch:
      tags:
        - SQL
      summary: Update SQL Query
      operationId: updateSQLQuery
      parameters:
        - $ref: '#/components/parameters/SqlQueryHeader'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlPostSuccessResponse' # Reusing for similar message structure
              examples:
                Query successfully persisted: { value: { Message: Query successfully persisted } }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Invalid SQL syntax: { value: { ErrorMessage: Invalid syntax for SQL query } }
                Invalid SQL query: { value: { ErrorMessage: Invalid SQL query } }
                Possible SQL injection: { value: { ErrorMessage: SQL query blocked, possible injection attributes } }
                Invalid SQL method: { value: { ErrorMessage: SQL query blocked, invalid SQL verb for HTTP method } }
                Where clause required: { value: { ErrorMessage: Missing WHERE clause } }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Table does not exist: { value: { ErrorMessage: Table does not exist } }
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Malformed input data: { value: { ErrorMessage: Malformed input data } }
      description: Route responsible for updating a SQL Query
    delete:
      tags:
        - SQL
      summary: Delete SQL Query by Full Match Object
      operationId: deleteSQLQueryByFullMatch
      parameters:
        - $ref: '#/components/parameters/SqlQueryHeader'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlPostSuccessResponse' # Reusing for similar message structure
              examples:
                Query successfully persisted: { value: { Message: Query successfully persisted } }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Invalid SQL syntax: { value: { ErrorMessage: Invalid syntax for SQL query } }
                Invalid SQL query: { value: { ErrorMessage: Invalid SQL query } }
                Possible SQL injection: { value: { ErrorMessage: SQL query blocked, possible injection attributes } }
                Invalid SQL method: { value: { ErrorMessage: SQL query blocked, invalid SQL verb for HTTP method } }
                Where clause required: { value: { ErrorMessage: Missing WHERE clause } }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Table does not exist: { value: { ErrorMessage: Table does not exist } }
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Malformed input data: { value: { ErrorMessage: Malformed input data } }
      description: Route responsible for deleting a SQL Query

  /sql/storedprocedure:
    post:
      tags:
        - SQL
      summary: Execute SQL Stored Procedure
      operationId: executeSQLStoredProcedure
      parameters:
        - $ref: '#/components/parameters/SqlStoredProcedureHeader'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SqlStoredProcedureRequest'
            examples:
              Stored Procedure in and out parameters:
                value:
                  out: { "client_count_output": 0 }
                  in: ["client_id", "user_id"]
        required: true
        description: Body to send post sql stored procedure data
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlPostSuccessResponse' # Reusing for similar message structure
              examples:
                Query successfully persisted: { value: { Message: Query successfully persisted } }
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Invalid SQL syntax: { value: { ErrorMessage: Invalid syntax for SQL query } }
                Invalid SQL query: { value: { ErrorMessage: Invalid SQL query } }
                Possible SQL injection: { value: { ErrorMessage: SQL query blocked, possible injection attributes } }
                Invalid SQL method: { value: { ErrorMessage: SQL query blocked, invalid SQL verb for HTTP method } }
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Table does not exist: { value: { ErrorMessage: Table does not exist } }
        "406":
          description: Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SqlErrorResponse'
              examples:
                Malformed input data: { value: { ErrorMessage: Malformed input data } }
      description: Route responsible for executing a SQL Stored Procedure
