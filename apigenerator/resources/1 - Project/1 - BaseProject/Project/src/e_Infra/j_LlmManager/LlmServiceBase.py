from abc import ABC, abstractmethod

class LlmServiceBase(ABC):
    """
    Abstract Base Class defining the interface for LLM service interaction.
    All specific LLM provider services (Gemini, OpenAI, Anthropic) should
    inherit from this class and implement its abstract methods.
    """

    @abstractmethod
    def __init__(self, api_key: str, model_name: str = None):
        """
        Initializes the LLM service.

        Args:
            api_key (str): The API key for the LLM provider.
            model_name (str, optional): The specific model name to use.
                                        If None, a default will be used by the implementation.
        """
        pass

    @abstractmethod
    def generate_text(self, prompt: str) -> str:
        """
        Generates text using the configured LLM model.

        Args:
            prompt (str): The prompt to send to the LLM API.

        Returns:
            str: The text response generated by the LLM API.

        Raises:
            RuntimeError: If there's an error during text generation.
        """
        pass

    @abstractmethod
    def check_connection(self) -> bool:
        """
        Performs a lightweight check to see if the configured API key
        is valid and can connect to the LLM service.

        Returns:
            bool: True if the connection and a simple API call succeed, False otherwise.
        """
        pass
