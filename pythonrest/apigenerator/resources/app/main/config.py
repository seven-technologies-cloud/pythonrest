import os

# Base directory of the application
basedir = os.path.abspath(os.path.dirname(os.path.dirname(os.path.dirname(__file__)))) # Should point to 'resources' dir

class Config:
    """Base configuration."""
    SECRET_KEY = os.getenv('SECRET_KEY', 'my_precious_secret_key')
    DEBUG = False
    # Database configuration (example, adjust if your app uses one)
    # SQLALCHEMY_DATABASE_URI = os.getenv('DATABASE_URL', 'sqlite:///' + os.path.join(basedir, 'app.db'))
    # SQLALCHEMY_TRACK_MODIFICATIONS = False

    # MCP and Gemini Configuration
    GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
    # The path to the swagger spec file. This will be generated by the framework.
    # It's often placed in a static or instance folder, or at the root of the generated API.
    # For the template, we assume it might be at the root of the generated app, or specified by env var.
    SWAGGER_SPEC_PATH = os.getenv('SWAGGER_SPEC_PATH', 'swagger.yaml')


class DevelopmentConfig(Config):
    """Development configuration."""
    DEBUG = True
    # Example: Overriding GEMINI_API_KEY for dev if needed, though env var is preferred
    # GEMINI_API_KEY = os.getenv('DEV_GEMINI_API_KEY', Config.GEMINI_API_KEY)


class TestingConfig(Config):
    """Testing configuration."""
    DEBUG = True
    TESTING = True
    # Example: Using a specific test database
    # SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'test_app.db')
    # Ensure GEMINI_API_KEY is set for tests that might use it, or mock the client
    GEMINI_API_KEY = os.getenv('TEST_GEMINI_API_KEY', 'test_gemini_key_placeholder') # Placeholder for tests


class ProductionConfig(Config):
    """Production configuration."""
    DEBUG = False
    # Ensure GEMINI_API_KEY is robustly managed in production (e.g., via secrets manager)
    # SWAGGER_SPEC_PATH might be fixed in a production deployment


config_by_name = dict(
    dev=DevelopmentConfig,
    test=TestingConfig,
    prod=ProductionConfig,
    default=DevelopmentConfig
)

def get_config(config_name=None):
    """Retrieve configuration class by name, defaulting to environment or 'default'."""
    if config_name is None:
        config_name = os.getenv('FLASK_CONFIG', 'default')
    return config_by_name.get(config_name, DevelopmentConfig)

# This makes sure that the factory.py created earlier (which has a fallback config)
# will use this more formal config structure if this file is present.
# The factory.py attempts `from pythonrest.apigenerator.resources.app.main.config import config_by_name`
# which should now succeed.
